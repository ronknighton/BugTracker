@model BugTracker.Models.Ticket
@using BugTracker.Helpers
@{
    ViewBag.Title = "Edit";
}
<div class="container">
    <div class="col-md-offset-3 col-md-6 tile p-15">
        <div class="col-md-10">
            <h2>Edit Ticket</h2>

            @using (Html.BeginForm("Edit", "Tickets", new { flag = @ViewBag.UserIndexFlag }, FormMethod.Post, new { enctype = "Multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">


                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.Created)
                    @Html.HiddenFor(model => model.OwnerUserId)
                    @Html.HiddenFor(model => model.ProjectId)
                    @Html.HiddenFor(model => model.Updated)
                    @Html.HiddenFor(model => model.Archived)



                    @{
                        var validator = new AccessValidator();
                        var isDevTicket = validator.DevProjectTicket(Model.Id);
                        var isPMTicket = validator.PMProjectTicket(Model.Id);
                        var isTicketOwner = validator.TicketOwner(Model.Id);
                        var isTicketAssigned = validator.DevTicketAssigned(Model.Id);
                    }
                    @if (User.IsInRole("Admin") || isPMTicket || isTicketOwner)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.Title)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    @if (User.IsInRole("Admin") || isPMTicket || isTicketOwner)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.Description)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }



                    <div class="form-group">
                        @Html.LabelFor(model => model.Created, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Created, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.Created, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Updated, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Updated, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.Updated, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Project Name", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.OwnerUserId, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.ProjectName, disabled = "disabled" } })
                            @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Ticket Type", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownList("TicketTypeId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TicketTypeId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Ticket Priority", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.DropDownList("TicketPriorityId", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TicketPriorityId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @if (User.IsInRole("Admin") || isPMTicket)
                {
                        <div class="form-group">
                            @Html.Label("Ticket Status", htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.TicketStatusId, null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TicketStatusId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.TicketStatusId)
                        <div class="form-group">
                            @Html.Label("Ticket Status", htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownListFor(model => model.TicketStatusId, null, htmlAttributes: new { @class = "form-control", disabled = "disabled" })
                                @Html.ValidationMessageFor(model => model.TicketStatusId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        @Html.Label("Ticket Owner", htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.OwnerUserId, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.OwnerUser, disabled = "disabled" } })

                            @Html.ValidationMessageFor(model => model.OwnerUserId, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    @if (User.IsInRole("Admin") || isPMTicket)

                {
                        <div class="form-group">
                            @Html.Label("Assigned To User", htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownList("AssignedToUserId", null, htmlAttributes: new { @class = "form-control", @id = "assignedToUser" })
                                @Html.ValidationMessageFor(model => model.AssignedToUserId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    }
                    else
                    {
                        @Html.HiddenFor(model => model.AssignedToUserId);

                        <div class="form-group">
                            @Html.Label("Assigned To User", htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.AssignedToUser.DisplayName, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                                @Html.ValidationMessageFor(model => model.AssignedToUserId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }


                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Save" class="btn btn-default" />
                        </div>
                    </div>
                </div>

                        }


            @{
                var userFlag = ViewBag.UserIndexFlag;
                if (userFlag)
                {
                    @Html.ActionLink("Back to List", "UserIndex");
            }
            else
            {
                    @Html.ActionLink("Back to List", "Index");
            }
            }
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
